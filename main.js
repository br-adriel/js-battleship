(()=>{"use strict";var e={280:(e,t,n)=>{e.exports=n.p+"2b4e552d83cdc58a824c.mp3"},304:(e,t,n)=>{e.exports=n.p+"9cb6424a07bef6cb2fca.mp3"},447:(e,t,n)=>{e.exports=n.p+"6f5854be22a9c6731035.mp3"},22:(e,t,n)=>{e.exports=n.p+"5708759fa80a68425065.mp3"}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{const e={carregarFooter(){const e=new Date;document.getElementById("footer-p").innerText=`Adriel Faria, ${e.getFullYear()}`}},t=function(e){const t=document.querySelector("main");t.hasChildNodes()&&t.removeChild(t.childNodes[0]),t.appendChild(e)},o=function(e,t="",n=[]){const o=document.createElement(e);return o.id=t,o.classList.add(...n),o},i=function(e,t,n=[]){const i=o("label");i.innerText=e,i.setAttribute("for",t);const r=o("input",t);n.forEach((e=>{r.setAttribute(e[0],e[1])}));const a=o("div","",["campo-form"]);return a.appendChild(i),a.appendChild(r),a},r=function(e="Player",t=!1){let n;const o={},i=[];function r(e=0,t=9){return Math.floor(Math.random()*(t+1-e))+e}function a(){return[r(),r()]}function s(e,t){return e[0]===t[0]&&e[1]===t[1]}function d(e,t=[0,9]){return e>=t[0]&&e<=t[1]}return t?(n="code",o.makeMove=function e(t=!1,n=!1,o=!1){if(t){let t;t=n?0:o?1:r(0,1);const a=i[i.length-1];let c=a[0],l=a[1];const p=r(0,1);return 1===t?(l+=p?1:-1,!d(l)||i.some((e=>s(e,[c,l])))?(l-=p?2:-2,!d(l)||i.some((e=>s(e,[c,l])))?o?e():e(!0,!0,!1):(i.push([c,l]),[c,l])):(i.push([c,l]),[c,l])):(c+=p?1:-1,!d(c)||i.some((e=>s(e,[c,l])))?(c-=p?2:-2,!d(c)||i.some((e=>s(e,[c,l])))?n?e():e(!0,!1,!0):(i.push([c,l]),[c,l])):(i.push([c,l]),[c,l]))}let c=a();for(;i.some((e=>s(e,c)));)c=a();return i.push(c),c}):n="human",o.name=e,o.randCoordinates=a,Object.defineProperties(o,{type:{get:()=>n}}),o},a=function(){let e;function t(){e=[];for(let t=0;t<10;t+=1){const t=[];for(let e=0;e<10;e+=1){const e={ship:{},shipPosition:-1,hasShip:!1,attacked:!1,hit:!1};t.push(e)}e.push(t)}}return t(),{addShip:function(t,n,o){const i=n[0],r=n[1];if(o){if(t.length-1+r>9)throw new Error("The ship exceeds the length of the board")}else if(t.length-1+i>9)throw new Error("The ship exceeds the height of the board");for(let n=0;n<t.length;n+=1)if(o){if(e[i][r+n].hasShip)throw new Error("There's already a ship placed on this space")}else if(e[i+n][r].hasShip)throw new Error("There's already a ship placed on this space");for(let n=0;n<t.length;n+=1){const a=n;o?(e[i][r+n].hasShip=!0,e[i][r+n].ship=t,e[i][r+n].shipPosition=a):(e[i+n][r].hasShip=!0,e[i+n][r].ship=t,e[i+n][r].shipPosition=a)}return!0},board:function(){return[...e]},clear:t,receiveAttack:function(t){const n=t[0],o=t[1];if(e[n][o].attacked)return"already attacked";const i=e[n][o].shipPosition;return e[n][o].attacked=!0,e[n][o].hasShip?(e[n][o].hit=!0,e[n][o].ship.hit(i),"hit"):"miss"},allShipsSunked:function(){for(let t=0;t<10;t+=1){const n=t;for(let t=0;t<10;t+=1){const o=t;if(e[n][o].hasShip&&!e[n][o].attacked)return!1}}return!0}}},s=function(e=1,t=""){if(Number.isNaN(e))throw new Error("The size of the shit must be an integer");if(e<1)throw new Error("Ships must have a size of at least 1");if(!Number.isInteger(e))throw new Error("The size of the shit must be an integer");let n=!1;const o=e,i=[];for(let t=0;t<e;t+=1)i.push(!0);return{name:t,length:o,hit:function(e){if(e<0||e>o-1)throw new Error("'position' must be a number from 0 up to the ship size");if(i[e]){i[e]=!1,n=!0;for(let e=0;e<o;e+=1)i[e]&&(n=!1);return!0}return!1},isSunk:function(){return n},sections:function(){return[...i]}}};function d(e,t,n,i){let r;if(void 0!==e[t]&&e[t][n].attacked)if(e[t][n].hit)r=o("div","",["acerto"]),r.innerText=e[t][n].ship.length;else{const e=o("i","",["fa-solid","fa-bomb"]);r=o("div","",["erro"]),r.appendChild(e)}else r=o("div",`${i}-${t}-${n}`);return r}const c=function(e,t=[]){const n=["A","B","C","D","E","F","G","H","I","J"],i=o("div","",["tabuleiro"]);for(let e=0;e<=10;e+=1){const t=o("p");0!==e&&(t.innerText=e),i.appendChild(t)}for(let r=0;r<10;r+=1){const a=o("p"),s=r;a.innerText=n[s],i.appendChild(a);for(let n=0;n<10;n+=1){let r;const a=n;r=0!==t.length?d(t,s,a,e):o("div",`${e}-${s}-${a}`),i.appendChild(r)}}return i},l=function(e,n){const i=o("h2");i.innerText=`Passe o dispositivo para ${e}`;const r=o("p");r.innerText="Agora é a vez de seu oponente";const a=o("button");a.innerText="Continuar",a.addEventListener("click",(()=>{t(n)}));const s=o("section","tela-prox-jog");return s.appendChild(i),s.appendChild(r),s.appendChild(a),s};var p=n(304),h=n(280),u=n(447);const m=function(e){const n=o("h2");n.innerText=`${e} venceu!`;const i=o("button");i.innerText="Jogar de novo",i.addEventListener("click",(()=>{t(g())}));const r=o("section","tela-vencedor");return r.appendChild(n),r.appendChild(i),r},f=function e(n,i,r=!1){let a=!1;const s=c("tabOponente",i[1].board()),d=c("tabPessoal",i[0].board()),f=o("section","tela-jogar"),v=o("div","",["info"]);function C(o,r){let a;o?a=e(n,i,r):(a=e(n.reverse(),i.reverse()),a=l(n[0].name,a)),t(a)}const b=o("button");b.innerText="Continuar";const g=o("h2");g.innerText=`Faça uma jogada, ${n[0].name}`,v.appendChild(g);const x=o("p");x.innerText="Atire no seu oponente:";const T=o("p");T.innerText="A situação do seu tabuleiro:";const y=o("div","",["div-tab"]);y.appendChild(x),y.appendChild(s);const E=o("div","",["div-tab"]);return E.appendChild(T),E.appendChild(d),s.addEventListener("click",(e=>{const t=e.target.id.split("-");if(3===t.length&&!a){a=!0,new Audio(p).play();const s=i[1].board(),d=Number(t[1]),l=Number(t[2]);let f;const x=i[1].receiveAttack([d,l]);if("hit"===x?(e.target.classList.add("acerto"),e.target.innerText=s[d][l].ship.length):"miss"===x&&(f=o("i","",["fa-solid","fa-bomb"]),e.target.classList.add("erro"),e.target.appendChild(f)),i[1].allShipsSunked())v.appendChild(m(n[0].name)),v.removeChild(g),E.removeChild(E.childNodes[1]),E.appendChild(c("tabOponente",i[0].board())),new Audio(h).play();else if("code"===n[1].type){const e=n[1].makeMove(r,!1,!1);"hit"===i[0].receiveAttack(e)?i[0].allShipsSunked()?(v.removeChild(g),v.appendChild(m(n[1].name)),E.removeChild(E.childNodes[1]),E.appendChild(c("tabOponente",i[0].board())),new Audio(u).play()):C(!0,!0):C(!0,!1)}else b.addEventListener("click",(()=>C(!1,!1))),v.appendChild(b)}})),f.appendChild(v),f.appendChild(y),f.appendChild(E),f},v=["A","B","C","D","E","F","G","H","I","J"],C=function e(n=[],r=[]){const d=a();let p=a();const h=[s(5,"porta-aviões"),s(4,"navio de guerra"),s(3,"cruzador"),s(2,"destruidor"),s(1,"submarino")];let u=0;"code"===n[1].type&&(p=function(e,t){let n=0;for(;e.length>n;){const o=Math.floor(10*Math.random()),i=Math.floor(10*Math.random()),r=Math.floor(2*Math.random());try{t.addShip(e[n],[o,i],r),n+=1}catch(e){}}return t}(h,p));const m=c("tab1"),C=o("h2");C.innerText=n[0].name;const b=o("p");b.innerText="Posicione suas embarcações";const g=function(){const e=o("div","",["erros-msgs"]);return{elemento:e,novaMensagem:function(t=""){const n=o("p");n.innerText=t;const i=o("div","",["mensagem"]),r=o("i","",["fa-solid","fa-xmark"]);r.addEventListener("click",(()=>{e.removeChild(i),e.hasChildNodes()||(e.style.display="none")})),i.appendChild(n),i.appendChild(r),e.appendChild(i),e.style.display="flex"}}}(),x=o("p","",["embarcacao"]);x.innerText=`${h[u].name.toUpperCase()} (tamanho ${h[u].length})`;const T=function(){const e=i("Linha (A-J):","linhaInput",[["required","true"],["maxlength","1"],["pattern","[a-jA-J]"],["name","linha"]]),t=i("Coluna (1-10):","colunaInput",[["type","tel"],["required","true"],["maxlength","2"],["pattern","^([1-9]|10)$"],["name","coluna"]]),n=o("input");n.setAttribute("type","checkbox"),n.setAttribute("name","vertical"),n.id="inputVertical";const r=o("label");r.innerText="Posicionar verticalmente",r.setAttribute("for","inputVertical");const a=o("div","",["input-check"]);a.appendChild(n),a.appendChild(r);const s=o("button");s.innerText="Adicionar",s.setAttribute("type","submit");const d=o("form");return d.appendChild(e),d.appendChild(t),d.appendChild(a),d.appendChild(s),d}(),y=o("div","",["adicionar-barco"]),E=o("button");E.innerText="Continuar",E.addEventListener("click",(()=>{if("code"===n[1].type)r.push(d),r.push(p),t(f(n,r));else if(r.push(d),2===r.length){const e=f(n.reverse(),r.reverse());t(l(n[0].name,e))}else{const o=e(n.reverse(),r);t(l(n[0].name,o))}})),T.addEventListener("submit",(e=>{e.preventDefault();try{const e=v.indexOf(T.linha.value.toUpperCase()),t=Number(T.coluna.value)-1,n=!T.vertical.checked;d.addShip(h[u],[e,t],n),T.reset(),T.linha.focus();for(let o=0;o<h[u].length;o+=1){let i;i=n?document.getElementById(`tab1-${e}-${t+o}`):document.getElementById(`tab1-${e+o}-${t}`),i.classList.add("barco"),i.innerText=h[u].length}u+=1,h.length<=u?(y.removeChild(y.childNodes[4]),y.removeChild(y.childNodes[3]),y.removeChild(y.childNodes[2]),y.removeChild(y.childNodes[1]),y.appendChild(E)):x.innerText=`${h[u].name.toUpperCase()} (tamanho ${h[u].length})`}catch(e){/exceeds the length/g.test(e)?g.novaMensagem("A embarcação extrapola a largura do tabuleiro"):/exceeds the height/g.test(e)?g.novaMensagem("A embarcação extrapola a altura do tabuleiro"):/already a ship/g.test(e)?g.novaMensagem("Já há uma embarcação onde você está tentando posicionar"):g.novaMensagem("Um erro ocorreu")}})),y.appendChild(C),y.appendChild(b),y.appendChild(g.elemento),y.appendChild(x),y.appendChild(T);const k=o("section","tela-posicionar");return k.appendChild(y),k.appendChild(m),k};const b=function(e=!1){let n;n=function(e,n){const a=i("Informe seu nome:","inputNome",[["type","text"],["name","nome"],["minlength","3"],["required","true"]]),s=o("button");s.setAttribute("type","submit"),s.innerText="Salvar";const d=o("form");if(d.appendChild(a),n){const e=i("Informe o nome de seu oponente:","inputNome2",[["type","text"],["name","nome2"],["minlength","3"],["required","true"]]);d.appendChild(e)}d.appendChild(s),d.addEventListener("submit",(e=>{e.preventDefault();const o=r(d.nome.value,!1);let i;i=n?r(d.nome2.value,!1):r("Computador",!0),t(C([o,i],[]))}));const c=o("h3");c.innerText=e;const l=o("div","",["form-jogador"]);return l.appendChild(c),l.appendChild(d),l}(e?"Como devo lhes chamar, marujos?":"Como devo lhe chamar, marujo?",e);const a=o("section","tela-participantes");return a.appendChild(n),a},g=function(){const e=document.createElement("h2");e.innerText="Olá marujo, contra quem deseja batalhar?";const n=o("p");n.innerText="Computador";const i=o("p");i.innerText="Outro marujo";const r=o("i","",["fa-solid","fa-robot"]),a=o("i","",["fa-solid","fa-anchor"]),s=o("button","",["escolha"]);s.appendChild(r),s.appendChild(n),s.addEventListener("click",(()=>{t(b(!1))}));const d=o("button","",["escolha"]);d.appendChild(a),d.appendChild(i),d.addEventListener("click",(()=>{t(b(!0))}));const c=o("div","",["escolhas"]);c.appendChild(s),c.appendChild(d);const l=o("div","",["pergunta"]);l.appendChild(e),l.appendChild(c);const p=o("section","boas-vindas");return p.appendChild(l),p};var x=n(22);const T=new Audio(x);T.loop=!0,T.play();const y=document.getElementById("btnSound");y.addEventListener("click",(()=>{let e;y.classList.contains("tocando")?(T.pause(),e=o("i","",["fa-solid","fa-volume-xmark"])):(T.play(),e=o("i","",["fa-solid","fa-volume-high"])),y.classList.toggle("tocando"),y.removeChild(y.childNodes[0]),y.appendChild(e)})),t(g()),e.carregarFooter()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,